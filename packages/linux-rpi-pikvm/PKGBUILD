# Maintainer: graysky <therealgraysky AT proton DOT me>
# Maintainer: Kevin Mihelich <kevin@archlinuxarm.org>
# Maintainer: Oleg Rakhmanov <oleg@archlinuxarm.org>
# Maintainer: Dave Higham <pepedog@archlinuxarm.org>
# Contributer: Jan Alexander Steffens (heftig) <heftig@archlinux.org>

if [ -f "/tmp/_pikvm_use_distcc_allowed" ]; then
	_pikvm_use_distcc=1
fi

pkgbase=linux-rpi
_commit=15ca476264094b25d0a210109a061192a468117b
_srcname=linux-${_commit}
_kernelname=${pkgbase#linux}
_regen=
pkgver=6.6.45
pkgrel=11
pkgdesc='Linux'
url="https://github.com/raspberrypi/linux"
arch=(armv7h aarch64)
license=(GPL2)
makedepends=(
  bc
  kmod
  inetutils
)
options=('!strip')
source_armv7h=('config')
source_aarch64=('config8')
source=("linux-$pkgver-${_commit:0:10}.tar.gz::https://github.com/raspberrypi/linux/archive/${_commit}.tar.gz"
        cmdline.txt
        config.txt
        0001-Make-proc-cpuinfo-consistent-on-arm64-and-arm.patch
        linux.preset
        archarm.diffconfig
        1003-remote-wakeup.patch
        2001-msd-dvd.patch
        2002-msd-inq.patch
        3001-pcf8563-wakeup-source.patch
        3002-pcf8563-wakeup-source-dtsi.patch
        4001-rgb24-corruption.patch
        5001-no-audio-ids.patch
)
md5sums=(SKIP SKIP SKIP
         SKIP SKIP SKIP
         SKIP SKIP SKIP SKIP SKIP SKIP SKIP)
md5sums_armv7h=(SKIP)
md5sums_aarch64=(SKIP)

# setup vars
if [[ $CARCH == "armv7h" ]]; then
  _kernel=kernel7.img KARCH=arm _image=zImage _config=config
elif [[ $CARCH == "aarch64" ]]; then
  _kernel=kernel8.img KARCH=arm64 _image=Image _config=config8
fi

_make() {
  test -s version
  make KERNELRELEASE="$(<version)" "$@"
}

prepare() {
  cd "${srcdir}/${_srcname}"

  # consistent behavior of lscpu on arm/arm64
  patch -p1 -i ../0001-Make-proc-cpuinfo-consistent-on-arm64-and-arm.patch

  patch -p1 -i ../1003-remote-wakeup.patch
  patch -p1 -i ../2001-msd-dvd.patch
  patch -p1 -i ../2002-msd-inq.patch
  patch -p1 -i ../3001-pcf8563-wakeup-source.patch
  #patch -p1 -i ../3002-pcf8563-wakeup-source-dtsi.patch # TODO: Remove, already applied
  patch -p1 -i ../4001-rgb24-corruption.patch
  patch -p1 -i ../5001-no-audio-ids.patch

  if [ -n "$_pikvm_use_distcc" ]; then
    sed -i '/HAVE_GCC_PLUGINS/d' arch/arm/Kconfig
  fi

  echo "Setting version..."
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  if [[ $_regen -eq 1 ]]; then
    # useful on two point releases to keep shit straight
    echo "Applying custom shit to bcm2711_defconfig"
    make bcm2711_defconfig
    cat ../archarm.diffconfig >> .config
	#
	scripts/config --module CONFIG_HID_CP2112
	# https://github.com/pikvm/pikvm/issues/1453
	scripts/config --module CONFIG_I2C_DLN2
	scripts/config --module CONFIG_SPI_DLN2
	scripts/config --module CONFIG_GPIO_DLN2
	scripts/config --module CONFIG_MFD_DLN2
	scripts/config --module CONFIG_DLN2_ADC
	# Debug
    scripts/config --enable CONFIG_DYNAMIC_DEBUG
    scripts/config --enable CONFIG_DYNAMIC_DEBUG_CORE
    make olddefconfig
    if [[ $CARCH == "armv7h" ]]; then
      # https://archlinuxarm.org/forum/viewtopic.php?f=23&t=16373
      scripts/config --enable CONFIG_BCM2835_THERMAL

      # re-enable LRU_GEN by default as the intial observation that it was to blame
      # for triggering OOM was likely a false positive, see:
      # https://github.com/raspberrypi/linux/issues/5395#issuecomment-1854410361
      # https://archlinuxarm.org/forum/viewtopic.php?f=23&t=16377
      scripts/config --enable CONFIG_LRU_GEN_ENABLED
    fi
    # bcm2711_defconfig inserts either -v7l or -v8 for CONFIG_LOCALVERSION= so set this to null
    sed '/^CONFIG_LOCALVERSION=/s,.*$,CONFIG_LOCALVERSION="",' .config >$startdir/newconfig.$_config
    echo "verify that newconfig.$_config is fit for purpose then redefine $_config"
    exit
  else
    echo "Setting config..."
    cp ../"$_config" .config
	#
	scripts/config --module CONFIG_HID_CP2112
	# https://github.com/pikvm/pikvm/issues/1453
	scripts/config --module CONFIG_I2C_DLN2
	scripts/config --module CONFIG_SPI_DLN2
	scripts/config --module CONFIG_GPIO_DLN2
	scripts/config --module CONFIG_MFD_DLN2
	scripts/config --module CONFIG_DLN2_ADC
	# Debug
    scripts/config --enable CONFIG_DYNAMIC_DEBUG
    scripts/config --enable CONFIG_DYNAMIC_DEBUG_CORE
    make olddefconfig
    diff -u ../"$_config" .config || :

    make -s kernelrelease > version
    echo "Prepared $pkgbase version $(<version)"
  fi
}

build() {
  cd "${srcdir}/${_srcname}"

  if [ -n "$_pikvm_use_distcc" ]; then
    _make "$_image" modules dtbs CC=distcc CXX=distcc
  else
    _make "$_image" modules dtbs
  fi
}

_package-pikvm() {
  pkgdesc="Linux kernel and modules (RPi Foundation fork with PiKVM patches)"
  depends=(
    coreutils
    firmware-raspberrypi
    kmod
    linux-firmware
    'mkinitcpio>=0.7'
  )
  optdepends=(
    'wireless-regdb: to set the correct wireless channels of your country'
  )
  provides=(
    linux="${pkgver}"
    KSMBD-MODULE
    WIREGUARD-MODULE
  )
  conflicts=(
    linux
    linux-rpi-16k
    uboot-raspberrypi
  )
  replaces=(
    linux-raspberrypi-latest
    linux-raspberrypi4
  )
  install=linux-rpi.install
  backup=(
    boot/config.txt
    boot/cmdline.txt
  )

  conflicts+=(linux-raspberrypi4 linux-raspberrypi linux-rpi)
  provides+=("linux-raspberrypi4=$pkgver" "linux-raspberrypi=$pkgver" "linux-rpi=$pkgver")
  replaces+=(linux-raspberrypi4-pikvm linux-raspberrypi-pikvm linux-raspberrypi)

  cd "${srcdir}/${_srcname}"

  local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  _make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install  # Suppress depmod

  # remove build link
  rm -f "$modulesdir"/build

  echo "Installing Arch ARM specific stuff..."
  mkdir -p "${pkgdir}"/boot
  make INSTALL_DTBS_PATH="${pkgdir}/boot" dtbs_install

  if [[ $CARCH == "aarch64" ]]; then
    # drop hard-coded devicetree=foo.dtb in /boot/config.txt for
    # autodetected load of supported of models at boot
    find "${pkgdir}/boot/broadcom" -type f -print0 | xargs -0 mv -t "${pkgdir}/boot"
    rmdir "${pkgdir}/boot/broadcom"
  fi

  cp arch/$KARCH/boot/$_image "${pkgdir}/boot/$_kernel"
  cp arch/$KARCH/boot/dts/overlays/README "${pkgdir}/boot/overlays"
  install -m644 ../config.txt "${pkgdir}/boot/config.txt"
  install -m644 ../cmdline.txt "${pkgdir}/boot"

  # sed expression for following substitutions
  local _subst="
    s|%PKGBASE%|${pkgbase}|g
    s|%KERNVER%|$(<version)|g
  "

  # install mkinitcpio preset file
  sed "${_subst}" ../linux.preset |
    install -Dm644 /dev/stdin "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"

  # rather than use another hook (90-linux.hook) rely on mkinitcpio's 90-mkinitcpio-install.hook
  # which avoids a double run of mkinitcpio that can occur
  touch "${pkgdir}/usr/lib/modules/$(<version)/vmlinuz"
}

_package-headers-pikvm() {
  pkgdesc="Headers and scripts for building modules for Linux kernel"
  provides=("linux-headers=${pkgver}")
  conflicts=('linux-headers' 'linux-rpi-16k-headers')
  replaces=('linux-raspberrypi-latest-headers' 'linux-raspberrypi4-headers')

  conflicts+=(linux-raspberrypi4-headers linux-raspberrypi-headers linux-rpi-headers)
  provides+=("linux-raspberrypi4-headers=$pkgver" "linux-raspberrypi-headers=$pkgver" "linux-rpi-headers=$pkgver")
  replaces+=(linux-raspberrypi4-headers-pikvm linux-raspberrypi-headers-pikvm linux-raspberrypi-headers)

  cd ${_srcname}
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/$KARCH" -m644 "arch/$KARCH/Makefile"
  cp -t "$builddir" -a scripts

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/$KARCH" -a "arch/$KARCH/include"
  install -Dt "$builddir/arch/$KARCH/kernel" -m644 "arch/$KARCH/kernel/asm-offsets.s"

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local _arch
  for _arch in "$builddir"/arch/*/; do
    if [[ $CARCH == "aarch64" ]]; then
      [[ $_arch = */"$KARCH"/ || $_arch == */arm/ ]] && continue
    else
      [[ $_arch = */"$KARCH"/ ]] && continue
    fi
    echo "Removing $(basename "$_arch")"
    rm -r "$_arch"
  done

  echo "Symlinking common aliases..."
  # https://archlinuxarm.org/forum/viewtopic.php?f=60&t=16354
  ln -sr arm "$builddir/arch/armv7h"
  ln -sr arm "$builddir/arch/armv7l"
  ln -sr arm64 "$builddir/arch/aarch64"

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -Sib "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x -print0)

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("${pkgbase}-pikvm" "${pkgbase}-headers-pikvm")
for _p in ${pkgname[@]}; do
  eval "package_${_p}() {
    _package${_p#${pkgbase}}
  }"
done
